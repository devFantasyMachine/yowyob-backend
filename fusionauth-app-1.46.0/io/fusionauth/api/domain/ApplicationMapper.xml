<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.fusionauth.api.domain.ApplicationMapper">
  <resultMap id="Application" type="io.fusionauth.domain.Application">
    <id property="id" column="a_id"/>
    <result property="accessControlConfiguration.uiIPAccessControlListId" column="a_ui_ip_access_control_lists_id" />
    <result property="active" column="a_active"/>
    <result property="dataFromDatabase" column="a_data" />
    <result property="emailConfiguration.emailUpdateEmailTemplateId" column="a_email_update_email_templates_id"/>
    <result property="emailConfiguration.emailVerificationEmailTemplateId" column="a_email_verification_email_templates_id"/>
    <result property="emailConfiguration.emailVerifiedEmailTemplateId" column="a_email_verified_email_templates_id"/>
    <result property="emailConfiguration.forgotPasswordEmailTemplateId" column="a_forgot_password_email_templates_id"/>
    <result property="emailConfiguration.loginIdInUseOnCreateEmailTemplateId" column="a_login_id_in_use_on_create_email_templates_id"/>
    <result property="emailConfiguration.loginIdInUseOnUpdateEmailTemplateId" column="a_login_id_in_use_on_update_email_templates_id"/>
    <result property="emailConfiguration.loginNewDeviceEmailTemplateId" column="a_login_new_device_email_templates_id"/>
    <result property="emailConfiguration.loginSuspiciousEmailTemplateId" column="a_login_suspicious_email_templates_id"/>
    <result property="emailConfiguration.passwordResetSuccessEmailTemplateId" column="a_password_reset_success_email_templates_id"/>
    <result property="emailConfiguration.passwordUpdateEmailTemplateId" column="a_password_update_email_templates_id"/>
    <result property="emailConfiguration.passwordlessEmailTemplateId" column="a_passwordless_email_templates_id"/>
    <result property="emailConfiguration.setPasswordEmailTemplateId" column="a_set_password_email_templates_id"/>
    <result property="emailConfiguration.twoFactorMethodAddEmailTemplateId" column="a_two_factor_method_add_email_templates_id"/>
    <result property="emailConfiguration.twoFactorMethodRemoveEmailTemplateId" column="a_two_factor_method_remove_email_templates_id"/>
    <result property="registrationConfiguration.formId" column="a_forms_id"/>
    <result property="insertInstant" column="a_insert_instant"/>
    <result property="jwtConfiguration.accessTokenKeyId" column="a_access_token_signing_keys_id"/>
    <result property="jwtConfiguration.idTokenKeyId" column="a_id_token_signing_keys_id"/>
    <result property="lastUpdateInstant" column="a_last_update_instant"/>
    <result property="multiFactorConfiguration.email.templateId" column="a_multi_factor_email_message_templates_id"/>
    <result property="multiFactorConfiguration.sms.templateId" column="a_multi_factor_sms_message_templates_id"/>
    <result property="name" column="a_name"/>
    <result property="formConfiguration.adminRegistrationFormId" column="a_admin_registration_forms_id"/>
    <result property="formConfiguration.selfServiceFormId" column="a_self_service_user_forms_id"/>
    <result property="lambdaConfiguration.accessTokenPopulateId" column="a_access_token_populate_lambdas_id"/>
    <result property="lambdaConfiguration.idTokenPopulateId" column="a_id_token_populate_lambdas_id"/>
    <result property="lambdaConfiguration.samlv2PopulateId" column="a_samlv2_populate_lambdas_id"/>
    <result property="lambdaConfiguration.selfServiceRegistrationValidationId" column="a_self_service_registration_validation_lambdas_id"/>
    <result property="samlv2Configuration.defaultVerificationKeyId" column="a_samlv2_default_verification_keys_id"/>
    <result property="samlv2Configuration.issuer" column="a_samlv2_issuer"/>
    <result property="samlv2Configuration.keyId" column="a_samlv2_keys_id"/>
    <result property="samlv2Configuration.logout.defaultVerificationKeyId" column="a_samlv2_logout_default_verification_keys_id"/>
    <result property="samlv2Configuration.logout.keyId" column="a_samlv2_logout_keys_id"/>
    <result property="samlv2Configuration.logout.singleLogout.keyId" column="a_samlv2_single_logout_keys_id"/>
    <result property="tenantId" column="a_tenants_id"/>
    <result property="themeId" column="a_themes_id"/>
    <result property="verificationEmailTemplateId" column="a_verification_email_templates_id"/>
    <collection property="roles" resultMap="ApplicationRole" notNullColumn="ar_id"/>
  </resultMap>


  <resultMap id="ApplicationRole" type="io.fusionauth.domain.ApplicationRole">
    <id property="id" column="ar_id"/>
    <result property="applicationId" column="ar_applications_id"/>
    <result property="description" column="ar_description"/>
    <result property="insertInstant" column="ar_insert_instant"/>
    <result property="isDefault" column="ar_is_default"/>
    <result property="isSuperRole" column="ar_is_super_role"/>
    <result property="lastUpdateInstant" column="ar_last_update_instant"/>
    <result property="name" column="ar_name"/>
  </resultMap>

  <!--@formatter:off-->
  <sql id="select">
    SELECT a.id                                          AS a_id,
      a.access_token_populate_lambdas_id                 AS a_access_token_populate_lambdas_id,
      a.access_token_signing_keys_id                     AS a_access_token_signing_keys_id,
      a.active                                           AS a_active,
      a.data                                             AS a_data,
      a.email_update_email_templates_id                  AS a_email_update_email_templates_id,
      a.email_verification_email_templates_id            AS a_email_verification_email_templates_id,
      a.email_verified_email_templates_id                AS a_email_verified_email_templates_id,
      a.forgot_password_email_templates_id               AS a_forgot_password_email_templates_id,
      a.login_id_in_use_on_create_email_templates_id     AS a_login_id_in_use_on_create_email_templates_id,
      a.login_id_in_use_on_update_email_templates_id     AS a_login_id_in_use_on_update_email_templates_id,
      a.login_new_device_email_templates_id              AS a_login_new_device_email_templates_id,
      a.login_suspicious_email_templates_id              AS a_login_suspicious_email_templates_id,
      a.forms_id                                         AS a_forms_id,
      a.id_token_populate_lambdas_id                     AS a_id_token_populate_lambdas_id,
      a.id_token_signing_keys_id                         AS a_id_token_signing_keys_id,
      a.insert_instant                                   AS a_insert_instant,
      a.multi_factor_email_message_templates_id          AS a_multi_factor_email_message_templates_id,
      a.multi_factor_sms_message_templates_id            AS a_multi_factor_sms_message_templates_id,
      a.name                                             AS a_name,
      a.last_update_instant                              AS a_last_update_instant,
      a.passwordless_email_templates_id                  AS a_passwordless_email_templates_id,
      a.password_reset_success_email_templates_id        AS a_password_reset_success_email_templates_id,
      a.password_update_email_templates_id               AS a_password_update_email_templates_id,
      a.samlv2_default_verification_keys_id              AS a_samlv2_default_verification_keys_id,
      a.samlv2_issuer                                    AS a_samlv2_issuer,
      a.samlv2_keys_id                                   AS a_samlv2_keys_id,
      a.samlv2_logout_default_verification_keys_id       AS a_samlv2_logout_default_verification_keys_id,
      a.samlv2_logout_keys_id                            AS a_samlv2_logout_keys_id,
      a.samlv2_populate_lambdas_id                       AS a_samlv2_populate_lambdas_id,
      a.samlv2_single_logout_keys_id                     AS a_samlv2_single_logout_keys_id,
      a.self_service_registration_validation_lambdas_id  AS a_self_service_registration_validation_lambdas_id,
      a.set_password_email_templates_id                  AS a_set_password_email_templates_id,
      a.tenants_id                                       AS a_tenants_id,
      a.themes_id                                        AS a_themes_id,
      a.two_factor_method_add_email_templates_id         AS a_two_factor_method_add_email_templates_id,
      a.two_factor_method_remove_email_templates_id      AS a_two_factor_method_remove_email_templates_id,
      a.ui_ip_access_control_lists_id                    AS a_ui_ip_access_control_lists_id,
      a.verification_email_templates_id                  AS a_verification_email_templates_id,
      ar.id                                              AS ar_id,
      ar.name                                            AS ar_name,
      a.admin_registration_forms_id                      AS a_admin_registration_forms_id,
      a.self_service_user_forms_id                       AS a_self_service_user_forms_id,
      ar.applications_id                                 AS ar_applications_id,
      ar.description                                     AS ar_description,
      ar.is_default                                      AS ar_is_default,
      ar.is_super_role                                   AS ar_is_super_role,
      ar.insert_instant                                  AS ar_insert_instant,
      ar.last_update_instant                             AS ar_last_update_instant
      FROM applications AS a LEFT OUTER JOIN application_roles AS ar ON a.id = ar.applications_id
  </sql>
  <!--@formatter:on-->

  <sql id="select_application_roles">
    SELECT ar.id             AS ar_id,
      ar.name                AS ar_name,
      ar.applications_id     AS ar_applications_id,
      ar.description         AS ar_description,
      ar.insert_instant      AS ar_insert_instant,
      ar.is_default          AS ar_is_default,
      ar.last_update_instant AS ar_last_update_instant,
      ar.is_super_role       AS ar_is_super_role,
      a.tenants_id           AS a_tenants_id
      FROM application_roles AS ar JOIN applications AS a ON ar.applications_id = a.id
  </sql>

  <!--@formatter:off-->
  <insert id="create">
    INSERT INTO
      applications(
                   id,
                   active,
                   data,
                   email_update_email_templates_id,
                   email_verification_email_templates_id,
                   email_verified_email_templates_id,
                   forgot_password_email_templates_id,
                   name,
                   access_token_signing_keys_id,
                   forms_id,
                   id_token_signing_keys_id,
                   insert_instant,
                   last_update_instant,
                   login_id_in_use_on_create_email_templates_id,
                   login_id_in_use_on_update_email_templates_id,
                   login_new_device_email_templates_id,
                   login_suspicious_email_templates_id,
                   multi_factor_email_message_templates_id,
                   multi_factor_sms_message_templates_id,
                   passwordless_email_templates_id,
                   password_reset_success_email_templates_id,
                   password_update_email_templates_id,
                   samlv2_issuer,
                   access_token_populate_lambdas_id,
                   id_token_populate_lambdas_id,
                   admin_registration_forms_id,
                   self_service_registration_validation_lambdas_id,
                   self_service_user_forms_id,
                   samlv2_keys_id,
                   samlv2_default_verification_keys_id,
                   samlv2_logout_default_verification_keys_id,
                   samlv2_logout_keys_id,
                   samlv2_single_logout_keys_id,
                   samlv2_populate_lambdas_id,
                   set_password_email_templates_id,
                   tenants_id,
                   themes_id,
                   two_factor_method_add_email_templates_id,
                   two_factor_method_remove_email_templates_id,
                   ui_ip_access_control_lists_id,
                   verification_email_templates_id)
      VALUES (#{id},
              #{active},
              #{dataToDatabase},
              #{emailConfiguration.emailUpdateEmailTemplateId},
              #{emailConfiguration.emailVerificationEmailTemplateId},
              #{emailConfiguration.emailVerifiedEmailTemplateId},
              #{emailConfiguration.forgotPasswordEmailTemplateId},
              #{name},
              #{jwtConfiguration.accessTokenKeyId},
              #{registrationConfiguration.formId},
              #{jwtConfiguration.idTokenKeyId},
              #{insertInstant},
              #{lastUpdateInstant},
              #{emailConfiguration.loginIdInUseOnCreateEmailTemplateId},
              #{emailConfiguration.loginIdInUseOnUpdateEmailTemplateId},
              #{emailConfiguration.loginNewDeviceEmailTemplateId},
              #{emailConfiguration.loginSuspiciousEmailTemplateId},
              #{multiFactorConfiguration.email.templateId},
              #{multiFactorConfiguration.sms.templateId},
              #{emailConfiguration.passwordlessEmailTemplateId},
              #{emailConfiguration.passwordResetSuccessEmailTemplateId},
              #{emailConfiguration.passwordUpdateEmailTemplateId},
              #{samlv2Configuration.issuer},
              #{lambdaConfiguration.accessTokenPopulateId},
              #{lambdaConfiguration.idTokenPopulateId},
              #{formConfiguration.adminRegistrationFormId},
              #{lambdaConfiguration.selfServiceRegistrationValidationId},
              #{formConfiguration.selfServiceFormId},
              #{samlv2Configuration.keyId},
              #{samlv2Configuration.defaultVerificationKeyId},
              #{samlv2Configuration.logout.defaultVerificationKeyId},
              #{samlv2Configuration.logout.keyId},
              #{samlv2Configuration.logout.singleLogout.keyId},
              #{lambdaConfiguration.samlv2PopulateId},
              #{emailConfiguration.setPasswordEmailTemplateId},
              #{tenantId},
              #{themeId},
              #{emailConfiguration.twoFactorMethodAddEmailTemplateId},
              #{emailConfiguration.twoFactorMethodRemoveEmailTemplateId},
              #{accessControlConfiguration.uiIPAccessControlListId},
              #{verificationEmailTemplateId})
  </insert>
  <!--@formatter:on-->

  <!--@formatter:off-->
  <update id="update">
    UPDATE applications
    SET
      access_token_populate_lambdas_id                = #{lambdaConfiguration.accessTokenPopulateId},
      access_token_signing_keys_id                    = #{jwtConfiguration.accessTokenKeyId},
      active                                          = #{active},
      data                                            = #{dataToDatabase},
      email_update_email_templates_id                 = #{emailConfiguration.emailUpdateEmailTemplateId},
      email_verification_email_templates_id           = #{emailConfiguration.emailVerificationEmailTemplateId},
      email_verified_email_templates_id               = #{emailConfiguration.emailVerifiedEmailTemplateId},
      forgot_password_email_templates_id              = #{emailConfiguration.forgotPasswordEmailTemplateId},
      forms_id                                        = #{registrationConfiguration.formId},
      id_token_populate_lambdas_id                    = #{lambdaConfiguration.idTokenPopulateId},
      id_token_signing_keys_id                        = #{jwtConfiguration.idTokenKeyId},
      last_update_instant                             = #{lastUpdateInstant},
      login_id_in_use_on_create_email_templates_id    = #{emailConfiguration.loginIdInUseOnCreateEmailTemplateId},
      login_id_in_use_on_update_email_templates_id    = #{emailConfiguration.loginIdInUseOnUpdateEmailTemplateId},
      login_new_device_email_templates_id             = #{emailConfiguration.loginNewDeviceEmailTemplateId},
      login_suspicious_email_templates_id             = #{emailConfiguration.loginSuspiciousEmailTemplateId},
      passwordless_email_templates_id                 = #{emailConfiguration.passwordlessEmailTemplateId},
      password_reset_success_email_templates_id       = #{emailConfiguration.passwordResetSuccessEmailTemplateId},
      password_update_email_templates_id              = #{emailConfiguration.passwordUpdateEmailTemplateId},
      multi_factor_email_message_templates_id         = #{multiFactorConfiguration.email.templateId},
      multi_factor_sms_message_templates_id           = #{multiFactorConfiguration.sms.templateId},
      name                                            = #{name},
      admin_registration_forms_id                     = #{formConfiguration.adminRegistrationFormId},
      samlv2_default_verification_keys_id             = #{samlv2Configuration.defaultVerificationKeyId},
      self_service_registration_validation_lambdas_id = #{lambdaConfiguration.selfServiceRegistrationValidationId},
      self_service_user_forms_id                      = #{formConfiguration.selfServiceFormId},
      samlv2_issuer                                   = #{samlv2Configuration.issuer},
      samlv2_keys_id                                  = #{samlv2Configuration.keyId},
      samlv2_logout_default_verification_keys_id      = #{samlv2Configuration.logout.defaultVerificationKeyId},
      samlv2_logout_keys_id                           = #{samlv2Configuration.logout.keyId},
      samlv2_populate_lambdas_id                      = #{lambdaConfiguration.samlv2PopulateId},
      samlv2_single_logout_keys_id                    = #{samlv2Configuration.logout.singleLogout.keyId},
      set_password_email_templates_id                 = #{emailConfiguration.setPasswordEmailTemplateId},
      themes_id                                       = #{themeId},
      two_factor_method_add_email_templates_id        = #{emailConfiguration.twoFactorMethodAddEmailTemplateId},
      two_factor_method_remove_email_templates_id     = #{emailConfiguration.twoFactorMethodRemoveEmailTemplateId},
      ui_ip_access_control_lists_id                   = #{accessControlConfiguration.uiIPAccessControlListId},
      verification_email_templates_id                 = #{verificationEmailTemplateId}
      WHERE id = #{id}
  </update>
  <!--@formatter:on-->

  <update id="updateRole">
    UPDATE application_roles
    SET description       = #{description},
      is_default          = #{isDefault},
      is_super_role       = #{isSuperRole},
      last_update_instant = #{lastUpdateInstant}
      WHERE id = #{id}
  </update>

  <insert id="createRoles">
    INSERT INTO application_roles (id, applications_id, description, insert_instant, is_default, is_super_role, last_update_instant, name) VALUES
    <foreach collection="roles" item="role" separator=",">
      (#{role.id}, #{role.applicationId}, #{role.description}, #{role.insertInstant}, #{role.isDefault}, #{role.isSuperRole},
      #{role.lastUpdateInstant}, #{role.name})
    </foreach>
  </insert>

  <insert id="createCleanSpeakApplicationIds">
    INSERT INTO clean_speak_applications (applications_id, clean_speak_application_id) VALUES
    <foreach collection="cleanSpeakApplicationIds" item="cleanSpeakApplicationId" separator=",">
      (#{applicationId}, #{cleanSpeakApplicationId})
    </foreach>
  </insert>

  <update id="deactivate" databaseId="mysql">
    UPDATE applications
    SET active = FALSE,
      data     = JSON_SET(CAST(data AS JSON),
                          '$.state', 'Inactive')
      WHERE id = #{applicationId}
  </update>

  <update id="deactivate" databaseId="postgresql">
    UPDATE applications
    SET active = FALSE,
      data     = JSONB_SET(data::JSONB, '{state}', '"Inactive"')
      WHERE id = #{applicationId}
  </update>


  <update id="reactivate" databaseId="mysql">
    UPDATE applications
    SET active = TRUE,
      data     = JSON_SET(CAST(data AS JSON),
                          '$.state', 'Active')
      WHERE id = #{applicationId}
  </update>

  <update id="reactivate" databaseId="postgresql">
    UPDATE applications
    SET active = TRUE,
      data     = JSONB_SET(data::JSONB, '{state}', '"Active"')
      WHERE id = #{applicationId}
  </update>

  <delete id="deleteRolesFromUsers">
    DELETE
    FROM user_registrations_application_roles
    WHERE application_roles_id IN (
    <foreach collection="roleIds" item="roleId" separator=",">
      #{roleId}
    </foreach>
    )
  </delete>

  <select id="retrieveAllByRegistrationFormId" resultMap="Application">
    <include refid="select"/>
    WHERE a.forms_id = #{formId}
    ORDER BY a.name ASC
  </select>

  <select id="retrieveAllIgnoreActive" resultMap="Application">
    <include refid="select"/>
    <if test="tenantId != null">
      WHERE a.tenants_id = #{tenantId}
    </if>
    ORDER BY a.name ASC
  </select>

  <select id="retrieveAll" resultMap="Application">
    <include refid="select"/>
    WHERE a.active = true
    <if test="tenantId != null">
      AND a.tenants_id = #{tenantId}
    </if>
    ORDER BY a.insert_instant DESC
  </select>

  <select id="retrieveAllInactive" resultMap="Application">
    <include refid="select"/>
    WHERE a.active = false
    <if test="tenantId != null">
      AND a.tenants_id = #{tenantId}
    </if>
    ORDER BY a.insert_instant DESC
  </select>

  <select id="retrieveAllWithAssignedRegistrationForm" resultMap="Application">
    <include refid="select"/>
    WHERE a.forms_id IS NOT null
    AND a.tenants_id = #{tenantId}
  </select>

  <select id="retrieveApplicationIdsUsingFormById" resultType="java.util.UUID">
    SELECT id
      FROM applications AS a
      WHERE a.forms_id = #{formId} OR a.admin_registration_forms_id = #{formId} OR a.self_service_user_forms_id = #{formId}
  </select>

  <select id="retrieveByCriteria" resultMap="Application">
    WITH ids AS (
      SELECT a.id
      FROM applications AS a
      INNER JOIN tenants AS t ON t.id = a.tenants_id
      <where>
        <if test="name != null">
          AND LOWER(a.name) LIKE #{name}
        </if>
        <if test="tenantId != null">
          AND a.tenants_id = #{tenantId}
        </if>
        <if test="state != null">
          <if test="_databaseId == 'mysql'">
            AND a.data ->> '$.state' = #{state}
          </if>
          <if test="_databaseId == 'postgresql'">
            AND (a.data::JSONB ->> 'state') = #{state}
          </if>
        </if>
      </where>
      <if test="orderBy != null">
        ORDER BY ${orderBy}
      </if>
      <if test="numberOfResults != null">
        LIMIT #{numberOfResults}
      </if>
      <if test="startRow != null">
        OFFSET #{startRow}
      </if>
    )
    <include refid="select"/>
    INNER JOIN ids ON ids.id = a.id
    INNER JOIN tenants AS t ON t.id = a.tenants_id
    <if test="orderBy != null">
      ORDER BY ${orderBy}
    </if>
  </select>

  <select id="retrieveCountByCriteria" resultType="int">
    SELECT COUNT(*)
    FROM applications AS a
    <where>
      <if test="name != null">
        AND LOWER(a.name) LIKE #{name}
      </if>
      <if test="tenantId != null">
        AND a.tenants_id = #{tenantId}
      </if>
      <if test="state != null">
        <if test="_databaseId == 'mysql'">
          AND a.data ->> '$.state' = #{state}
        </if>
        <if test="_databaseId == 'postgresql'">
          AND (a.data::JSONB ->> 'state') = #{state}
        </if>
      </if>
    </where>
  </select>

  <select id="retrieveById" resultMap="Application">
    <include refid="select"/>
    WHERE a.id = #{id} AND a.active = true
    <if test="tenantId != null">
      AND a.tenants_id = #{tenantId}
    </if>
  </select>

  <select id="retrieveByIdIgnoreActive" resultMap="Application">
    <include refid="select"/>
    WHERE a.id = #{id}
    <if test="tenantId != null">
      AND a.tenants_id = #{tenantId}
    </if>
  </select>

  <select id="retrieveByName" resultMap="Application">
    <include refid="select"/>
    WHERE a.name = #{name} AND a.active = true AND a.tenants_id = #{tenantId}
  </select>

  <select id="retrieveBySAMLv2Issuer" resultMap="Application">
    <include refid="select"/>
    WHERE
    a.samlv2_issuer = #{issuer} AND a.tenants_id = #{tenantId}
  </select>

  <select id="retrieveExisting" resultMap="Application">
    <include refid="select"/>
    WHERE
    <if test="id != null">
      a.id != #{id} AND
    </if>
    a.name = #{name} AND a.tenants_id = #{tenantId}
  </select>

  <select id="retrieveExistingBySAMLv2Issuer" resultMap="Application">
    <include refid="select"/>
    WHERE
    <if test="id != null">
      a.id != #{id} AND
    </if>
    a.samlv2_issuer = #{issuer} AND a.tenants_id = #{tenantId}
  </select>

  <select id="retrieveIdsByCleanSpeakIds" resultType="java.util.UUID">
    SELECT DISTINCT a.id FROM applications AS a INNER JOIN clean_speak_applications AS csa ON a.id = csa.applications_id
    WHERE csa.clean_speak_application_id IN (
    <foreach collection="cleanSpeakApplicationIds" item="id" separator=",">
      #{id}
    </foreach>
    )
  </select>

  <select id="retrieveValidIds" resultType="java.util.UUID">
    SELECT DISTINCT a.id FROM applications AS a
    WHERE a.id IN (
    <foreach collection="ids" item="id" separator=",">
      #{id}
    </foreach>
    )
  </select>

  <select id="retrieveRolesByIds" resultMap="ApplicationRole">
    <include refid="select_application_roles"/>
    WHERE ar.id IN (
    <foreach collection="roleIds" item="id" separator=",">
      #{id}
    </foreach>
    )
    <if test="tenantId != null">
      AND a.tenants_id = #{tenantId}
    </if>
  </select>

  <select id="retrieveRoleById" resultMap="ApplicationRole">
    <include refid="select_application_roles"/>
    WHERE ar.applications_id = #{applicationId} AND ar.id = #{roleId}

    <if test="tenantId != null">
      AND a.tenants_id = #{tenantId}
    </if>
  </select>

  <select id="retrieveRoleByName" resultMap="ApplicationRole">
    <include refid="select_application_roles"/>
    WHERE ar.applications_id = #{applicationId} AND ar.name = #{name}

    <if test="tenantId != null">
      AND a.tenants_id = #{tenantId}
    </if>
  </select>

  <select id="retrieveRolesByNames" resultMap="ApplicationRole">
    <include refid="select_application_roles"/>
    WHERE ar.applications_id = #{applicationId}

    AND ar.name IN (
    <foreach collection="names" item="name" separator=",">
      #{name}
    </foreach>
    )

    <if test="tenantId != null">
      AND a.tenants_id = #{tenantId}
    </if>
  </select>
</mapper>
