<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2020, FusionAuth, All Rights Reserved
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.fusionauth.api.domain.BreachedPasswordMapper">
  <resultMap id="BreachedPasswordTenantMetric" type="io.fusionauth.api.domain.mybatis._BreachedPasswordTenantMetric">
    <id column="tenants_id" property="tenantId"/>
    <result property="matchedExactCount" column="matched_exact_count"/>
    <result property="matchedSubAddressCount" column="matched_sub_address_count"/>
    <result property="matchedCommonPasswordCount" column="matched_common_password_count"/>
    <result property="matchedPasswordCount" column="matched_password_count"/>
    <result property="passwordsCheckedCount" column="passwords_checked_count"/>
  </resultMap>

  <sql id="selectCommonPasswords">
    SELECT password
    FROM common_breached_passwords
  </sql>

  <insert id="createCommonPassword">
    INSERT INTO common_breached_passwords (password)
    VALUES(#{password})
  </insert>

  <delete id="deleteAllCommonPasswords">
    DELETE FROM common_breached_passwords
  </delete>

  <select id="retrieveCommonPassword" resultType="String">
    <include refid="selectCommonPasswords"/>
    WHERE password = #{password}
  </select>

  <select id="retrieveAllCommonPasswords" resultType="String">
    <include refid="selectCommonPasswords"/>
  </select>

  <insert id="upsertCommonPasswords" databaseId="mysql">
    INSERT IGNORE INTO common_breached_passwords (password) VALUES
    <foreach collection="passwords" item="password" separator=",">
      (#{password})
    </foreach>
  </insert>

  <insert id="upsertCommonPasswords" databaseId="postgresql">
    INSERT INTO common_breached_passwords (password) VALUES
    <foreach collection="passwords" item="password" separator=",">
      (#{password})
    </foreach>
    ON CONFLICT DO NOTHING
  </insert>

  <insert id="incrementBreachedNoMatch" databaseId="mysql">
    INSERT INTO breached_password_metrics (
    tenants_id,
    matched_exact_count,
    matched_sub_address_count,
    matched_common_password_count,
    matched_password_count,
    passwords_checked_count)
    VALUES
    (#{tenantId}, 0, 0, 0, 1, 1)
    ON DUPLICATE KEY UPDATE
    passwords_checked_count = passwords_checked_count + 1
  </insert>

  <insert id="incrementBreachedNoMatch" databaseId="postgresql">
    INSERT INTO breached_password_metrics AS bpm (
    tenants_id,
    matched_exact_count,
    matched_sub_address_count,
    matched_common_password_count,
    matched_password_count,
    passwords_checked_count)
    VALUES
    (#{tenantId}, 0, 0, 0, 1, 1)
    ON CONFLICT (tenants_id) DO
    UPDATE SET
    passwords_checked_count = bpm.passwords_checked_count + 1
  </insert>

  <insert id="incrementBreachedCommonPasswordMatch" databaseId="mysql">
    INSERT INTO breached_password_metrics (
    tenants_id,
    matched_exact_count,
    matched_sub_address_count,
    matched_common_password_count,
    matched_password_count,
    passwords_checked_count)
    VALUES
    (#{tenantId}, 0, 0, 1, 0, 1)
    ON DUPLICATE KEY UPDATE
    matched_common_password_count = matched_common_password_count  + 1,
    passwords_checked_count = passwords_checked_count + 1
  </insert>

  <insert id="incrementBreachedCommonPasswordMatch" databaseId="postgresql">
    INSERT INTO breached_password_metrics AS bpm (
    tenants_id,
    matched_exact_count,
    matched_sub_address_count,
    matched_common_password_count,
    matched_password_count,
    passwords_checked_count)
    VALUES
    (#{tenantId}, 0, 0, 1, 0, 1)
    ON CONFLICT (tenants_id) DO
    UPDATE SET
    matched_common_password_count = bpm.matched_common_password_count + 1,
    passwords_checked_count = bpm.passwords_checked_count + 1
  </insert>

  <insert id="incrementBreachedPasswordMatch" databaseId="mysql">
    INSERT INTO breached_password_metrics (
    tenants_id,
    matched_exact_count,
    matched_sub_address_count,
    matched_common_password_count,
    matched_password_count,
    passwords_checked_count)
    VALUES
    (#{tenantId}, 0, 0, 0, 1, 1)
    ON DUPLICATE KEY UPDATE
    matched_password_count = matched_password_count  + 1,
    passwords_checked_count = passwords_checked_count + 1
  </insert>

  <insert id="incrementBreachedPasswordMatch" databaseId="postgresql">
    INSERT INTO breached_password_metrics AS bpm (
    tenants_id,
    matched_exact_count,
    matched_sub_address_count,
    matched_common_password_count,
    matched_password_count,
    passwords_checked_count)
    VALUES
    (#{tenantId}, 0, 0, 0, 1, 1)
    ON CONFLICT (tenants_id) DO
    UPDATE SET
    matched_password_count = bpm.matched_password_count + 1,
    passwords_checked_count = bpm.passwords_checked_count + 1
  </insert>

  <insert id="incrementBreachedExactMatch" databaseId="mysql">
    INSERT INTO breached_password_metrics (
    tenants_id,
    matched_exact_count,
    matched_sub_address_count,
    matched_common_password_count,
    matched_password_count,
    passwords_checked_count)
    VALUES
    (#{tenantId}, 1, 0, 0, 0, 1)
    ON DUPLICATE KEY UPDATE
    matched_exact_count = matched_exact_count  + 1,
    passwords_checked_count = passwords_checked_count + 1
  </insert>

  <insert id="incrementBreachedExactMatch" databaseId="postgresql">
    INSERT INTO breached_password_metrics AS bpm (
    tenants_id,
    matched_exact_count,
    matched_sub_address_count,
    matched_common_password_count,
    matched_password_count,
    passwords_checked_count)
    VALUES
    (#{tenantId}, 1, 0, 0, 0, 1)
    ON CONFLICT (tenants_id) DO
    UPDATE SET
    matched_exact_count = bpm.matched_exact_count + 1,
    passwords_checked_count = bpm.passwords_checked_count + 1
  </insert>

  <insert id="incrementBreachedSubAddressMatch" databaseId="mysql">
    INSERT INTO breached_password_metrics (
    tenants_id,
    matched_exact_count,
    matched_sub_address_count,
    matched_common_password_count,
    matched_password_count,
    passwords_checked_count)
    VALUES
    (#{tenantId}, 0, 1, 0, 0, 1)
    ON DUPLICATE KEY UPDATE
    matched_sub_address_count = matched_sub_address_count  + 1,
    passwords_checked_count = passwords_checked_count + 1
  </insert>

  <insert id="incrementBreachedSubAddressMatch" databaseId="postgresql">
    INSERT INTO breached_password_metrics AS bpm (
    tenants_id,
    matched_exact_count,
    matched_sub_address_count,
    matched_common_password_count,
    matched_password_count,
    passwords_checked_count)
    VALUES
    (#{tenantId}, 0, 1, 0, 0, 1)
    ON CONFLICT (tenants_id) DO
    UPDATE SET
    matched_sub_address_count = bpm.matched_sub_address_count + 1,
    passwords_checked_count = bpm.passwords_checked_count + 1
  </insert>
</mapper>